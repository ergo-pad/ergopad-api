from fastapi import status
from sqlalchemy.orm import Session
from starlette.responses import JSONResponse
from db.models import whitelistEvents, events
from db.schemas import whitelistEvents as schema

############################################
### CRUD OPERATIONS FOR WHITELIST EVENTS ###
############################################


def get_whitelist_event_by_name(db: Session, projectName: str, roundName: str):
    whitelist_event = db.query(whitelistEvents.WhitelistEvent).filter(
        whitelistEvents.WhitelistEvent.projectName == projectName).filter(whitelistEvents.WhitelistEvent.roundName == roundName).first()
    if not whitelist_event:
        return JSONResponse(status_code=status.HTTP_404_NOT_FOUND, content=f'Event not found')
    else:
        ret = get_whitelist_event(db, whitelist_event.id)
        if not ret:
            return JSONResponse(status_code=status.HTTP_404_NOT_FOUND, content=f'Event not found')
        return ret


def get_whitelist_event(db: Session, id: int):
    whitelist_event = db.query(whitelistEvents.WhitelistEvent).filter(
        whitelistEvents.WhitelistEvent.id == id).first()
    if not whitelist_event:
        return None
    else:
        event = db.query(events.Event).filter(
            events.Event.id == whitelist_event.eventId).first()
        if not event:
            None
        return schema.WhitelistEvent(
            id=whitelist_event.id,
            eventName=event.name,
            description=event.description,
            total_sigusd=event.total_sigusd,
            buffer_sigusd=event.buffer_sigusd,
            individualCap=event.individualCap,
            start_dtz=event.start_dtz,
            end_dtz=event.end_dtz,
            projectName=whitelist_event.projectName,
            roundName=whitelist_event.roundName,
            eventId=event.id,
            title=whitelist_event.title,
            subtitle=whitelist_event.subtitle,
            details=whitelist_event.details,
            checkBoxes=whitelist_event.checkBoxes,
            additionalDetails=whitelist_event.additionalDetails
        )


def get_whitelist_event_by_event_id(db: Session, event_id: int):
    whitelist_event = db.query(whitelistEvents.WhitelistEvent).filter(
        whitelistEvents.WhitelistEvent.eventId == event_id).first()
    if not whitelist_event:
        return None
    else:
        event = db.query(events.Event).filter(
            events.Event.id == event_id).first()
        if not event:
            None
        return schema.WhitelistEvent(
            id=whitelist_event.id,
            eventName=event.name,
            description=event.description,
            total_sigusd=event.total_sigusd,
            buffer_sigusd=event.buffer_sigusd,
            individualCap=event.individualCap,
            start_dtz=event.start_dtz,
            end_dtz=event.end_dtz,
            projectName=whitelist_event.projectName,
            roundName=whitelist_event.roundName,
            eventId=event.id,
            title=whitelist_event.title,
            subtitle=whitelist_event.subtitle,
            details=whitelist_event.details,
            checkBoxes=whitelist_event.checkBoxes,
            additionalDetails=whitelist_event.additionalDetails
        )


def get_whitelist_events(db: Session, skip: int = 0, limit: int = 100):
    return db.query(whitelistEvents.WhitelistEvent).offset(skip).limit(limit).all()


def create_whitelist_event(db: Session, whitelist_event: schema.CreateWhitelistEvent):
    # generate name for event
    event_month = str(whitelist_event.start_dtz.month)
    if len(event_month) == 1:
        event_month = '0' + event_month
    event_name = whitelist_event.projectName+"-"+whitelist_event.roundName+"-" + \
        str(whitelist_event.start_dtz.year) + event_month + "wl"
    # insert event
    db_event = events.Event(
        name=event_name,
        description="__autogenerated_by_cms",
        total_sigusd=whitelist_event.total_sigusd,
        buffer_sigusd=whitelist_event.buffer_sigusd,
        individualCap=whitelist_event.individualCap,
        isWhitelist=1,
        start_dtz=whitelist_event.start_dtz,
        end_dtz=whitelist_event.end_dtz,
    )
    db.add(db_event)
    db.commit()
    db.refresh(db_event)
    # insert whitelistEvent
    db_whitelistEvent = whitelistEvents.WhitelistEvent(
        projectName=whitelist_event.projectName,
        roundName=whitelist_event.roundName,
        eventId=db_event.id,
        title=whitelist_event.title,
        subtitle=whitelist_event.subtitle,
        details=whitelist_event.details,
        checkBoxes=whitelist_event.checkBoxes.dict(),
        additionalDetails=whitelist_event.additionalDetails
    )
    db.add(db_whitelistEvent)
    db.commit()
    db.refresh(db_whitelistEvent)
    # return
    return schema.WhitelistEvent(
        id=db_whitelistEvent.id,
        eventName=event_name,
        description="__autogenerated_by_cms",
        total_sigusd=whitelist_event.total_sigusd,
        buffer_sigusd=whitelist_event.buffer_sigusd,
        individualCap=whitelist_event.individualCap,
        start_dtz=whitelist_event.start_dtz,
        end_dtz=whitelist_event.end_dtz,
        projectName=whitelist_event.projectName,
        roundName=whitelist_event.roundName,
        eventId=db_event.id,
        title=whitelist_event.title,
        subtitle=whitelist_event.subtitle,
        details=whitelist_event.details,
        checkBoxes=whitelist_event.checkBoxes,
        additionalDetails=whitelist_event.additionalDetails
    )


def delete_whitelist_event(db: Session, id: int):
    ret = get_whitelist_event(db, id)
    if not ret:
        return JSONResponse(status_code=status.HTTP_404_NOT_FOUND, content=f'Event not found')
    whitelist_event = db.query(whitelistEvents.WhitelistEvent).filter(
        whitelistEvents.WhitelistEvent.id == id).first()
    db.delete(whitelist_event)
    event = db.query(events.Event).filter(
        events.Event.id == ret.eventId).first()
    db.delete(event)
    db.commit()
    return ret


def edit_whitelist_event(
    db: Session, id: int, whitelist_event: schema.CreateWhitelistEvent
):
    db_whitelist_event = db.query(whitelistEvents.WhitelistEvent).filter(
        whitelistEvents.WhitelistEvent.id == id).first()
    if not db_whitelist_event:
        return JSONResponse(status_code=status.HTTP_404_NOT_FOUND, content=f'Event not found')
    db_event = db.query(events.Event).filter(
        events.Event.id == db_whitelist_event.eventId).first()
    if not db_event:
        return JSONResponse(status_code=status.HTTP_404_NOT_FOUND, content=f'Event not found')

    update_data = whitelist_event.dict(exclude_unset=True)
    for key, value in update_data.items():
        if key in db_whitelist_event.__dict__.keys():
            setattr(db_whitelist_event, key, value)
        if key in db_event.__dict__.keys():
            setattr(db_event, key, value)

    db.add(db_whitelist_event)
    db.add(db_event)
    db.commit()

    return get_whitelist_event(db, id)
