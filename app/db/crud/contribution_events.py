from fastapi import status
from sqlalchemy.orm import Session
from starlette.responses import JSONResponse
from db.models import contributionEvents, events
from db.schemas import contributionEvents as schema

###############################################
### CRUD OPERATIONS FOR CONTRIBUTION EVENTS ###
###############################################


def get_contribution_event_by_name(db: Session, projectName: str, roundName: str):
    contribution_event = db.query(contributionEvents.ContributionEvent).filter(
        contributionEvents.ContributionEvent.projectName == projectName).filter(
            contributionEvents.ContributionEvent.roundName == roundName).first()
    if not contribution_event:
        return JSONResponse(status_code=status.HTTP_404_NOT_FOUND, content=f'Event not found')
    else:
        ret = get_contribution_event(db, contribution_event.id)
        if not ret:
            return JSONResponse(status_code=status.HTTP_404_NOT_FOUND, content=f'Event not found')
        return ret


def get_contribution_event(db: Session, id: int):
    contribution_event = db.query(contributionEvents.ContributionEvent).filter(
        contributionEvents.ContributionEvent.id == id).first()
    if not contribution_event:
        return None
    else:
        event = db.query(events.Event).filter(
            events.Event.id == contribution_event.eventId).first()
        if not event:
            None
        return schema.ContributionEvent(
            id=contribution_event.id,
            eventId=event.id,
            eventName=event.name,
            start_dtz=event.start_dtz,
            end_dtz=event.end_dtz,
            projectName=contribution_event.projectName,
            roundName=contribution_event.roundName,
            title=contribution_event.title,
            subtitle=contribution_event.subtitle,
            details=contribution_event.details,
            checkBoxes=contribution_event.checkBoxes,
            tokenId=contribution_event.tokenId,
            tokenName=contribution_event.tokenName,
            tokenDecimals=contribution_event.tokenDecimals,
            tokenPrice=contribution_event.tokenPrice,
            proxyNFTId=contribution_event.proxyNFTId,
            whitelistTokenId=contribution_event.whitelistTokenId,
            additionalDetails=contribution_event.additionalDetails
        )


def get_contribution_event_by_event_id(db: Session, event_id: int):
    contribution_event = db.query(contributionEvents.ContributionEvent).filter(
        contributionEvents.ContributionEvent.eventId == event_id).first()
    if not contribution_event:
        return None
    else:
        event = db.query(events.Event).filter(
            events.Event.id == event_id).first()
        if not event:
            None
        return schema.ContributionEvent(
            id=contribution_event.id,
            eventId=event.id,
            eventName=event.name,
            start_dtz=event.start_dtz,
            end_dtz=event.end_dtz,
            projectName=contribution_event.projectName,
            roundName=contribution_event.roundName,
            title=contribution_event.title,
            subtitle=contribution_event.subtitle,
            details=contribution_event.details,
            checkBoxes=contribution_event.checkBoxes,
            tokenId=contribution_event.tokenId,
            tokenName=contribution_event.tokenName,
            tokenDecimals=contribution_event.tokenDecimals,
            tokenPrice=contribution_event.tokenPrice,
            proxyNFTId=contribution_event.proxyNFTId,
            whitelistTokenId=contribution_event.whitelistTokenId,
            additionalDetails=contribution_event.additionalDetails
        )


def get_contribution_events(db: Session, skip: int = 0, limit: int = 500):
    return db.query(contributionEvents.ContributionEvent).offset(skip).limit(limit).all()


def create_contribution_event(db: Session, contribution_event: schema.CreateContributionEvent):
    # generate name for event
    event_month = str(contribution_event.start_dtz.month)
    if len(event_month) == 1:
        event_month = '0' + event_month
    event_name = contribution_event.projectName+"-"+contribution_event.roundName+"-" + \
        str(contribution_event.start_dtz.year) + event_month
    # insert event
    db_event = events.Event(
        name=event_name,
        description="__autogenerated_by_cms",
        isWhitelist=0,
        start_dtz=contribution_event.start_dtz,
        end_dtz=contribution_event.end_dtz,
    )
    db.add(db_event)
    db.commit()
    db.refresh(db_event)
    # insert contributionEvent
    db_contributionEvent = contributionEvents.ContributionEvent(
        projectName=contribution_event.projectName,
        roundName=contribution_event.roundName,
        eventId=db_event.id,
        title=contribution_event.title,
        subtitle=contribution_event.subtitle,
        details=contribution_event.details,
        checkBoxes=contribution_event.checkBoxes.dict(),
        tokenId=contribution_event.tokenId,
        tokenName=contribution_event.tokenName,
        tokenDecimals=contribution_event.tokenDecimals,
        tokenPrice=contribution_event.tokenPrice,
        proxyNFTId=contribution_event.proxyNFTId,
        whitelistTokenId=contribution_event.whitelistTokenId,
        additionalDetails=contribution_event.additionalDetails
    )
    db.add(db_contributionEvent)
    db.commit()
    db.refresh(db_contributionEvent)
    # return
    return schema.ContributionEvent(
        id=db_contributionEvent.id,
        eventId=db_event.id,
        eventName=db_event.name,
        start_dtz=db_event.start_dtz,
        end_dtz=db_event.end_dtz,
        projectName=contribution_event.projectName,
        roundName=contribution_event.roundName,
        title=contribution_event.title,
        subtitle=contribution_event.subtitle,
        details=contribution_event.details,
        checkBoxes=contribution_event.checkBoxes,
        tokenId=contribution_event.tokenId,
        tokenName=contribution_event.tokenName,
        tokenDecimals=contribution_event.tokenDecimals,
        tokenPrice=contribution_event.tokenPrice,
        proxyNFTId=contribution_event.proxyNFTId,
        whitelistTokenId=contribution_event.whitelistTokenId,
        additionalDetails=contribution_event.additionalDetails
    )


def delete_contribution_event(db: Session, id: int):
    ret = get_contribution_event(db, id)
    if not ret:
        return JSONResponse(status_code=status.HTTP_404_NOT_FOUND, content=f'Event not found')
    contribution_event = db.query(contributionEvents.ContributionEvent).filter(
        contributionEvents.ContributionEvent.id == id).first()
    db.delete(contribution_event)
    event = db.query(events.Event).filter(
        events.Event.id == ret.eventId).first()
    db.delete(event)
    db.commit()
    return ret


def edit_contribution_event(
    db: Session, id: int, contribution_event: schema.CreateContributionEvent
):
    db_contribution_event = db.query(contributionEvents.ContributionEvent).filter(
        contributionEvents.ContributionEvent.id == id).first()
    if not db_contribution_event:
        return JSONResponse(status_code=status.HTTP_404_NOT_FOUND, content=f'Event not found')
    db_event = db.query(events.Event).filter(
        events.Event.id == db_contribution_event.eventId).first()
    if not db_event:
        return JSONResponse(status_code=status.HTTP_404_NOT_FOUND, content=f'Event not found')

    update_data = contribution_event.dict(exclude_unset=True)
    # generate name for event
    event_month = str(contribution_event.start_dtz.month)
    if len(event_month) == 1:
        event_month = '0' + event_month
    event_name = contribution_event.projectName+"-"+contribution_event.roundName+"-" + \
        str(contribution_event.start_dtz.year) + event_month
    update_data["name"] = event_name
    for key, value in update_data.items():
        if key in db_contribution_event.__dict__.keys():
            setattr(db_contribution_event, key, value)
        if key in db_event.__dict__.keys():
            setattr(db_event, key, value)

    db.add(db_contribution_event)
    db.add(db_event)
    db.commit()

    return get_contribution_event(db, id)
